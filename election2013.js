// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var blended, candidates, info, map, opacity, path, percentages, winner;
    L.TopoJSON = L.GeoJSON.extend({
      addData: function(jsonData) {
        var k, v, _ref, _results;
        if (jsonData.type === "Topology") {
          _ref = jsonData.objects;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push(L.GeoJSON.prototype.addData.call(this, topojson.feature(jsonData, v)));
          }
          return _results;
        } else {
          return L.GeoJSON.prototype.addData.call(this, jsonData);
        }
      }
    });
    opacity = d3.scale.linear().range([0, 0.7]).domain([0, 5]).clamp(true);
    candidates = {
      "Bergeron": "#4daf4a",
      "Coderre": "#e41a1c",
      "Joly": "#377eb8",
      "Côté": "#ff7f00"
    };
    percentages = function(votes) {
      var c, k, result, sum, v;
      result = {};
      sum = 0;
      for (c in candidates) {
        if (!(votes[c] != null)) {
          continue;
        }
        v = parseInt(votes[c]);
        sum += v;
        result[c] = v;
      }
      for (k in result) {
        result[k] /= sum;
      }
      result.sum = sum;
      return result;
    };
    map = L.map('map').setView([45.55, -73.7], 11);
    L.tileLayer('http://{s}.tile.cloudmade.com/{key}/65636/256/{z}/{x}/{y}.png', {
      key: "09bd425f79134130bcc6e1763e8c462f",
      minZoom: 11,
      attribution: "Base map from <a href=\"http://cloudmade.com\" target=\"_blank\">CloudMade</a> | Data from <a href=\"http://donnees.ville.montreal.qc.ca/\" target=\"_blank\">Montreal Open Data Portal</a> | &copy; <a href=\"http://nicolas.kruchten.com/\" target=\"_blank\">Nicolas Kruchten</a> 2013"
    }).addTo(map);
    info = L.control();
    info.onAdd = function(map) {
      this._div = L.DomUtil.create('div', 'info');
      this.update();
      return this._div;
    };
    info.update = function(props) {
      var arc, c, dim, g, pie, pieData, result, svg;
      if (props == null) {
        return this._div.innerHTML = "";
      }
      props.District = props.District.replace(/\?/g, '-');
      props.District = props.District.replace(/\d*-/, '');
      result = "";
      result += "<h4>" + props.ARRONDISSEMENT + " <br /> " + props.District + " #" + props.Bureau + "</h4>";
      pieData = [];
      for (c in candidates) {
        if (props[c] != null) {
          pieData.push({
            candidate: c,
            votes: props[c],
            color: candidates[c]
          });
        }
      }
      this._div.innerHTML = result;
      dim = 250;
      arc = d3.svg.arc().outerRadius(dim / 2 - 10).innerRadius(0);
      pie = d3.layout.pie().value(function(d) {
        return d.votes;
      });
      svg = d3.select(this._div).append("svg").attr("width", dim).attr("height", dim).append("g").attr("transform", "translate(" + dim / 2 + "," + dim / 2 + ")");
      g = svg.selectAll(".arc").data(pie(pieData)).enter().append("g").attr("class", "arc");
      g.append("path").attr("d", arc).style("fill", function(d) {
        return d.data.color;
      });
      g.append("text").attr("transform", function(d) {
        return "translate(" + arc.centroid(d) + ")";
      }).style("text-anchor", "middle").text(function(d) {
        return d.data.candidate;
      });
      return g.append("text").attr("transform", function(d) {
        return "translate(" + arc.centroid(d) + ")";
      }).attr("dy", "1em").style("text-anchor", "middle").text(function(d) {
        return d.data.votes;
      });
    };
    info.addTo(map);
    path = d3.geo.path().projection(d3.geo.mercator().scale(60000));
    blended = function(data) {
      return "rgb(" + parseInt(255 * data["Coderre"]) + "," + parseInt(255 * data["Bergeron"]) + "," + parseInt(255 * data["Joly"]) + ")";
    };
    winner = function(data) {
      var c, max, maxKey;
      max = 0;
      maxKey = "";
      for (c in candidates) {
        if (data[c] != null) {
          if (data[c] > max) {
            max = data[c];
            maxKey = c;
          }
        }
      }
      return candidates[maxKey];
    };
    return d3.json("sections.topojson", function(error, data) {
      var polys;
      polys = new L.TopoJSON(data, {
        style: function(d) {
          var c, style;
          data = percentages(d.properties);
          if (/blended/.test(window.location.href)) {
            c = blended(data);
          } else {
            c = winner(data);
          }
          style = {
            fillColor: c,
            color: c,
            weight: 1,
            fillOpacity: opacity(data.sum / path.area(d))
          };
          return style;
        },
        onEachFeature: function(feature, layer) {
          return layer.on({
            mouseout: function(e) {
              polys.resetStyle(e.target);
              return info.update();
            },
            mouseover: function(e) {
              e.target.setStyle({
                weight: 4,
                color: '#fff',
                opacity: 1,
                fillOpacity: 0.9
              });
              if (!L.Browser.ie && !L.Browser.opera) {
                e.target.bringToFront();
              }
              return info.update(e.target.feature.properties);
            }
          });
        }
      });
      return polys.addTo(map);
    });
  });

}).call(this);
